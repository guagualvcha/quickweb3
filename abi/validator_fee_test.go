package abi

import (
	"context"
	"encoding/hex"
	"encoding/json"
	"fmt"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/ethereum/go-ethereum/params"
	"github.com/stretchr/testify/assert"
	"math/big"
	"sort"
	"strings"
	"testing"
	"time"
)

func TestABC(t *testing.T) {
	a := []float64{1, 2, 3, 4}
	sort.Sort(sort.Float64Slice(a))
	fmt.Println(a)
}

func TestFee(t *testing.T) {
	go transferRoutin()
	client, _ := ethclient.Dial(endpoint)
	instance, _ := NewValidator(validatorSetAddr, client)
	headers := make(chan *types.Header, 100)
	//wsclient, err := ethclient.Dial(wsEndpoint)
	//assert.NoError(t, err)
	client.SubscribeNewHead(context.Background(), headers)
	for header := range headers {
		h := int64(header.Number.Uint64() - 7)
		block, err := client.BlockByNumber(context.Background(), big.NewInt(int64(h)))
		assert.NoError(t, err)
		txs := block.Transactions()
		totalFee := big.NewInt(0)
		for _, tx := range txs {
			price := tx.GasPrice()
			recip, err := client.TransactionReceipt(context.Background(), tx.Hash())
			assert.NoError(t, err)
			totalFee = totalFee.Add(totalFee, price.Mul(price, big.NewInt(int64(recip.GasUsed))))
		}
		vA, _ := client.BalanceAt(context.Background(), systemRewardAddr, big.NewInt(h))
		kA, _ := client.BalanceAt(context.Background(), validatorSetAddr, big.NewInt(h))
		vb, _ := client.BalanceAt(context.Background(), systemRewardAddr, big.NewInt(h-1))
		kb, _ := client.BalanceAt(context.Background(), validatorSetAddr, big.NewInt(h-1))

		if big.NewInt(0).Add(vA, kA).Cmp(big.NewInt(0).Add(vb.Add(vb, kb), totalFee)) != 0 {
			panic(fmt.Sprintf("panic1 at hegiht %d", h))
		}
		totalIncome := big.NewInt(0)
		for i := int64(0); i < 1; i++ {
			res, err := instance.CurrentValidatorSet(&bind.CallOpts{BlockNumber: big.NewInt(h)}, big.NewInt(i))
			fmt.Println(err)
			totalIncome = totalIncome.Add(totalIncome, res.Incoming)
		}
		if totalIncome.Cmp(kA) != 0 {
			fmt.Println(totalIncome.String())
			fmt.Println(kA.String())
			panic(fmt.Sprintf("panic2 at hegiht %d", h))
		}
		fmt.Printf("check finish at height %d, txs %d, total income %s\n", h, len(txs), totalIncome.String())
		//fmt.Printf("check finish at height %d, txs %d, ",h,len(txs))

	}
}

func transferRoutin() {
	client, _ := ethclient.Dial(endpoint)
	fmt.Println(account.addr.String())
	for {
		sendEther(client, account, receiveAccount, big.NewInt(0).Mul(big.NewInt(params.GWei), big.NewInt(10000)), false, 1)
		time.Sleep(1 * time.Second)
	}
}

func TestFee1(t *testing.T) {
	client, _ := ethclient.Dial(endpoint)
	instance, _ := NewValidator(validatorSetAddr, client)
	h := int64(43)
	block, err := client.BlockByNumber(context.Background(), big.NewInt(int64(h)))
	assert.NoError(t, err)
	txs := block.Transactions()
	totalFee := big.NewInt(0)
	for _, tx := range txs {
		price := tx.GasPrice()
		recip, err := client.TransactionReceipt(context.Background(), tx.Hash())
		assert.NoError(t, err)
		totalFee = totalFee.Add(totalFee, price.Mul(price, big.NewInt(int64(recip.GasUsed))))
	}
	vA, _ := client.BalanceAt(context.Background(), systemRewardAddr, big.NewInt(h))
	kA, _ := client.BalanceAt(context.Background(), validatorSetAddr, big.NewInt(h))
	vb, _ := client.BalanceAt(context.Background(), systemRewardAddr, big.NewInt(h-1))
	kb, _ := client.BalanceAt(context.Background(), validatorSetAddr, big.NewInt(h-1))

	if big.NewInt(0).Add(vA, kA).Cmp(big.NewInt(0).Add(vb.Add(vb, kb), totalFee)) != 0 {
		panic(fmt.Sprintf("panic1 at hegiht %d", h))
	}
	totalIncome := big.NewInt(0)
	for i := int64(0); i < 3; i++ {
		res, err := instance.CurrentValidatorSet(&bind.CallOpts{BlockNumber: big.NewInt(h)}, big.NewInt(i))
		if err != nil {
			fmt.Println(err)
		}
		totalIncome = totalIncome.Add(totalIncome, res.Incoming)
	}
	fmt.Println(totalIncome.String())
	fmt.Println(kA.String())

	end := uint64(43)
	ite, err := instance.FilterValidatorDeposit(&bind.FilterOpts{Start: 43, End: &end}, nil)
	assert.NoError(t, err)
	for ite.Next() {
		fmt.Println(ite.Event.Validator.String())
	}

	if totalIncome.Cmp(kA) != 0 {
		panic(fmt.Sprintf("panic2 at hegiht %d", h))
	}
	fmt.Printf("check finish at height %d, txs %d, total income %s\n", h, len(txs), totalIncome.String())

}

func TestFee2(t *testing.T) {
	for h := int64(0); h < 100; h++ {
		fmt.Printf("height %d\n", h)
		client, _ := ethclient.Dial(endpoint)
		instance, _ := NewValidator(validatorSetAddr, client)
		block, err := client.BlockByNumber(context.Background(), big.NewInt(int64(h)))
		assert.NoError(t, err)
		txs := block.Transactions()
		totalFee := big.NewInt(0)
		for _, tx := range txs {
			price := tx.GasPrice()
			recip, err := client.TransactionReceipt(context.Background(), tx.Hash())
			assert.NoError(t, err)
			totalFee = totalFee.Add(totalFee, price.Mul(price, big.NewInt(int64(recip.GasUsed))))
		}
		vA, _ := client.BalanceAt(context.Background(), systemRewardAddr, big.NewInt(h))
		kA, _ := client.BalanceAt(context.Background(), validatorSetAddr, big.NewInt(h))
		vb, _ := client.BalanceAt(context.Background(), systemRewardAddr, big.NewInt(h-1))
		kb, _ := client.BalanceAt(context.Background(), validatorSetAddr, big.NewInt(h-1))

		if big.NewInt(0).Add(vA, kA).Cmp(big.NewInt(0).Add(vb.Add(vb, kb), totalFee)) != 0 {
			panic(fmt.Sprintf("panic1 at hegiht %d", h))
		}
		totalIncome := big.NewInt(0)
		for i := int64(0); i < 3; i++ {
			res, err := instance.CurrentValidatorSet(&bind.CallOpts{BlockNumber: big.NewInt(h)}, big.NewInt(i))
			fmt.Println(err)
			totalIncome = totalIncome.Add(totalIncome, res.Incoming)
		}
		if totalIncome.Cmp(kA) != 0 {
			fmt.Println(totalIncome.String())
			fmt.Println(kA.String())
			panic(fmt.Sprintf("panic2 at hegiht %d", h))
		}
	}
}

func TestFee4(t *testing.T) {
	fmt.Println(time.Now().Unix())
}

func TestFee3(t *testing.T) {

	// example of transaction input data
	txInput := "0x252dba420000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001700000000000000000000000000000000000000000000000000000000000002e0000000000000000000000000000000000000000000000000000000000000036000000000000000000000000000000000000000000000000000000000000003ea000000000000000000000000000000000000000000000000000000000000000a800000000000000000000000000000000000000000000000000000000000000b000000000000000000000000000000000000000000000000000000000000000b800000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000c800000000000000000000000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000000d800000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000019bf6c2f17e6e804759739239b3307a26b70125d000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000040902f1ac000000000000000000000000000000000000000000000000000000000000000000000000000000001b96b92314c44b159149f7e0303511fb2fc4774f000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000040902f1ac000000000000000000000000000000000000000000000000000000000000000000000000000000001ee38d535d541c55c9dae27b12edf090c608e6fb000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000244d2301cc000000000000000000000000099b59774b2c1a514c94202fab37c3483ef1f8db0000000000000000000000000000000000000000000000000000000000000000000000000000000027a6635e44d183c1e2382caf4477f990273092b9000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000040902f1ac0000000000000000000000000000000000000000000000000000000000000000000000000000000032d0e73a0828b40ab8af13a99012c3f560bf3c40000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000040902f1ac000000000000000000000000000000000000000000000000000000000000000000000000000000004cb2ecd45b7b1c387b826c38b6b08e0f3c09b5f8000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000040902f1ac0000000000000000000000000000000000000000000000000000000000000000000000000000000060e1f4e7261376a2ab25857619fda734c29819af000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000040902f1ac0000000000000000000000000000000000000000000000000000000000000000000000000000000062c3bb0d366653ed55b651cef54b5dafd0f95603000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000040902f1ac00000000000000000000000000000000000000000000000000000000000000000000000000000000764f744b63c18dceb86214f07a036166245412af000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000040902f1ac000000000000000000000000000000000000000000000000000000000000000000000000000000008e062798f847475390f77f097b4edded3b54c50f000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000040902f1ac000000000000000000000000000000000000000000000000000000000000000000000000000000009520c76d770cd40e24c5debc1ef035e3c6f7782b000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000040902f1ac0000000000000000000000000000000000000000000000000000000000000000000000000000000099833684246097bf647eecc4a1dc62ab99f8074f000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000040902f1ac00000000000000000000000000000000000000000000000000000000000000000000000000000000b6fac5c55236250f272fa918a145d852c0b245e1000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000040902f1ac00000000000000000000000000000000000000000000000000000000000000000000000000000000c3fed2b2241b4ff5b403e79deedb8f5b6f41fd1b000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000040902f1ac00000000000000000000000000000000000000000000000000000000000000000000000000000000cbc403f9fd4913ead270b3ef53894cd937355ee0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000040902f1ac00000000000000000000000000000000000000000000000000000000000000000000000000000000eb28c8a96a92f7449eabd5952fdb4ceed20be028000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000040902f1ac00000000000000000000000000000000000000000000000000000000000000000000000000000000a0bd503a669882a0dedd4df8031afcc6e0ce4498000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000040902f1ac00000000000000000000000000000000000000000000000000000000000000000000000000000000b1ffdef9e828aa8f78533c4964128aecfc3360e5000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000040902f1ac00000000000000000000000000000000000000000000000000000000000000000000000000000000bfea86f5f5f381577c744111e94e357af3a7c97d000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000040902f1ac00000000000000000000000000000000000000000000000000000000000000000000000000000000ca069b7ac1b9759d5f0547aa550c9c51d71d36d1000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000040902f1ac00000000000000000000000000000000000000000000000000000000000000000000000000000000d09fe9cacb3cb3fc025729d391f2fac5f58f82da000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000040902f1ac00000000000000000000000000000000000000000000000000000000000000000000000000000000d3e9fb78b7ae06db9518846016d2710476904c86000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000040902f1ac00000000000000000000000000000000000000000000000000000000000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d560000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000002470a08231000000000000000000000000099b59774b2c1a514c94202fab37c3483ef1f8db00000000000000000000000000000000000000000000000000000000"

	// load contract ABI
	abi, err := abi.JSON(strings.NewReader(TimelockABI))
	if err != nil {
		panic(err)
	}

	// decode txInput method signature
	decodedSig, err := hex.DecodeString(txInput[2:10])
	if err != nil {
		panic(err)
	}

	// recover Method from signature and ABI
	method, err := abi.MethodById(decodedSig)
	if err != nil {
		panic(err)
	}

	// decode txInput Payload
	decodedData, err := hex.DecodeString(txInput[10:])
	if err != nil {
		panic(err)
	}

	data := []MulticallCall{}

	// unpack method inputs
	err = method.Inputs.Unpack(&data, decodedData)
	if err != nil {
		panic(err)
	}
	bz, _ := json.Marshal(data)
	fmt.Println(string(bz))
}
